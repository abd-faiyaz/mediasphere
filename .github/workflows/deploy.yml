name: MediaSphere CI/CD Pipeline

on:
  push:
    branches: [ sumon, main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  REGISTRY_USER: abdfaiyaz

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/mediasphere-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./MediaSphere_backend
        file: ./MediaSphere_backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for database
      id: meta-database
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/mediasphere-db
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push database image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/database
        file: ./docker/database/Dockerfile
        push: true
        tags: ${{ steps.meta-database.outputs.tags }}
        labels: ${{ steps.meta-database.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/mediasphere-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./MediaSphere_frontend
        file: ./MediaSphere_frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sumon') && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USER }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script: |
          echo "Starting deployment on Azure VM..."
          
          # Navigate to deployment directory
          cd ~/mediasphere-deploy
          
          # Pull the latest images
          echo "Pulling latest Docker images..."
          sudo docker compose -f docker-compose.production.yml pull
          
          # Stop current services
          echo "Stopping current services..."
          sudo docker compose -f docker-compose.production.yml down
          
          # Start services with new images
          echo "Starting services with updated images..."
          sudo docker compose -f docker-compose.production.yml up -d
          
          # Wait a bit for services to start
          echo "Waiting for services to start..."
          sleep 30
          
          # Check service status
          echo "Checking service status..."
          sudo docker compose -f docker-compose.production.yml ps
          
          # Test backend health
          echo "Testing backend health..."
          curl -f http://localhost:8080/actuator/health || echo "Backend health check failed"
          
          # Test frontend
          echo "Testing frontend..."
          curl -f http://localhost:3000/ || echo "Frontend health check failed"
          
          echo "Deployment completed!"

    - name: Deployment Status Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
