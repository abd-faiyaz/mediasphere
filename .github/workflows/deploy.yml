name: MediaSphere CI/CD Pipeline

on:
  push:
    branches: [ sumon, main ]

  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  REGISTRY_USER: abdfaiyaz
  AZURE_VM_HOST: ${{ secrets.AZURE_VM_IP }}
  AZURE_VM_USER: ${{ secrets.AZURE_VM_USERNAME }}
  AZURE_VM_SSH_KEY: ${{ secrets.AZURE_VM_SSH_KEY }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/mediasphere-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./MediaSphere_backend
        file: ./MediaSphere_backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for database
      id: meta-database
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/mediasphere-db
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest

    - name: Build and push database image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/database
        file: ./docker/database/Dockerfile
        push: true
        tags: ${{ steps.meta-database.outputs.tags }}
        labels: ${{ steps.meta-database.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/mediasphere-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./MediaSphere_frontend
        file: ./MediaSphere_frontend/Dockerfile.production
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sumon') && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Debug SSH Connection Info
      run: |
        echo "Host: ${{ env.AZURE_VM_HOST }}"
        echo "Username: ${{ env.AZURE_VM_USER }}"
        echo "Host length: $(echo -n '${{ env.AZURE_VM_HOST }}' | wc -c)"
        echo "Username length: $(echo -n '${{ env.AZURE_VM_USER }}' | wc -c)"

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script: |
          echo "Deploying to Azure VM..."
          cd /home/${{ env.AZURE_VM_USER }}/mediasphere || cd mediasphere
          
          # Stop existing containers
          docker compose -f docker-compose.production.yml down
          
          # Create production environment file
          cat > .env.production << EOF
          POSTGRES_DB=mediaspheredb
          POSTGRES_USER=mediasphere_user
          POSTGRES_PASSWORD=mediasphere_password123
          SPRING_PROFILES_ACTIVE=production
          SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mediaspheredb
          SPRING_DATASOURCE_USERNAME=mediasphere_user
          SPRING_DATASOURCE_PASSWORD=mediasphere_password123
          GEMINI_API_KEY=AIzaSyDJMJt-rMWW3u55lPpwjsLU6Z8XCE6xhD8
          AI_SERVICE_TYPE=gemini
          AI_SERVICE_ENDPOINT=https://generativelanguage.googleapis.com/v1beta
          AI_SERVICE_API_KEY=AIzaSyDJMJt-rMWW3u55lPpwjsLU6Z8XCE6xhD8
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bG9naWNhbC1sZW1taW5nLTI3LmNsZXJrLmFjY291bnRzLmRldiQ
          CLERK_SECRET_KEY=sk_test_hFzWxK70KYY2p2nUo6xR30DcecKCIYYxpeMRxhD8ae
          NEXT_PUBLIC_API_BASE_URL=http://20.255.51.86:8080
          NEXT_PUBLIC_APP_URL=http://20.255.51.86:3000
          EOF
          
          # Pull latest images
          docker compose -f docker-compose.production.yml pull
          
          # Start services
          docker compose -f docker-compose.production.yml up -d
          
          # Show running containers
          docker ps
  
    - name: Deployment Status Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
