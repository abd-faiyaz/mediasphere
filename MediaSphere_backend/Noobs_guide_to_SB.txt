1) create SB project using maven, select same java and jdk version
2) select the following dependencies:
   - Spring Web
   - Spring Data JPA
   - postgresql Driver
   - Lombok (optional, for reducing boilerplate code)
3) edit the application.properties file:
   - set the server port (e.g., `server.port=8080`)
   - configure the database connection:
     ```
     spring.datasource.url=jdbc:postgresql://localhost:5432/your_database_name
     spring.datasource.username=your_username
     spring.datasource.password=your_password
     spring.jpa.hibernate.ddl-auto=update
     spring.jpa.show-sql=true
     ```
     and other lines
4) create entity class which maps to a database table:
   - use `@Entity` annotation
   - define fields with `@Id`, `@GeneratedValue`, and other JPA annotations as needed
5) create a repository interface that extends `JpaRepository`
6) create a service class that uses the repository to perform CRUD operations
   - annotate the service class with `@Service`
   - inject the repository using `@Autowired`

entity hobe per table er jonno ekta
okhane @column diye map kore jesob private field banano oigula either existing field hote hobe table ee
OR theyll be created automatically by spring
jodi kono private field create kori and oitar jonno table ee auto field generation na chai then

//repository er case ee
repository layer uses the relevant entity class to generate queries using hibernate
Simple queries (findByEmail)	Let Spring Data JPA auto-generate them
Complex JPQL queries (joins, aggregations)	@Query with JPQL
Database-specific SQL	@Query(nativeQuery = true)
Dynamic queries (optional filters)	QueryDSL


Current running command:

DB_URL=jdbc:postgresql://localhost:5432/mydb ./mvnw spring-boot:run