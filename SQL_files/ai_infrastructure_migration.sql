-- Phase 1: AI Infrastructure Tables
-- Run this script to create the necessary tables for AI functionality

-- AI Requests table to store all AI interaction history
CREATE TABLE ai_requests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    request_type VARCHAR(50) NOT NULL CHECK (request_type IN ('SUMMARY', 'QUIZ', 'ANALYSIS', 'RECOMMENDATION')),
    request_data TEXT NOT NULL,
    response_data TEXT,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'COMPLETED', 'FAILED')),
    error_message TEXT,
    processing_time_ms INTEGER,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- AI Generated Content table for caching and reusing AI responses
CREATE TABLE ai_generated_content (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    content_type VARCHAR(50) NOT NULL CHECK (content_type IN ('SUMMARY', 'QUIZ_QUESTIONS', 'SENTIMENT_ANALYSIS', 'TOPIC_EXTRACTION', 'KEY_INSIGHTS', 'RECOMMENDATIONS')),
    content_hash VARCHAR(64) NOT NULL, -- SHA-256 hash of input content for caching
    content_data TEXT NOT NULL,
    metadata JSONB, -- Store additional metadata like word_count, topics, etc.
    source_reference_id UUID, -- Reference to media/club/thread ID
    source_reference_type VARCHAR(20) CHECK (source_reference_type IN ('MEDIA', 'CLUB', 'THREAD')),
    expires_at TIMESTAMP WITHOUT TIME ZONE, -- For cache expiration
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE
);

-- Quiz Sessions table for storing quiz attempts and results
CREATE TABLE quiz_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    media_id UUID,
    club_id UUID,
    questions JSONB NOT NULL, -- Store quiz questions and correct answers
    user_answers JSONB, -- Store user's selected answers
    score INTEGER DEFAULT 0,
    total_questions INTEGER NOT NULL,
    difficulty_level VARCHAR(20) CHECK (difficulty_level IN ('EASY', 'MEDIUM', 'HARD')),
    completed_at TIMESTAMP WITHOUT TIME ZONE,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (media_id) REFERENCES media(id) ON DELETE CASCADE,
    FOREIGN KEY (club_id) REFERENCES clubs(id) ON DELETE CASCADE
);

-- User Recommendations table for storing AI-generated recommendations
CREATE TABLE user_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    recommended_media_ids JSONB, -- Array of recommended media IDs
    recommended_club_ids JSONB, -- Array of recommended club IDs
    reasoning TEXT, -- AI explanation for recommendations
    recommendation_score DECIMAL(3,2), -- Confidence score 0.00-1.00
    is_viewed BOOLEAN DEFAULT FALSE,
    expires_at TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() + INTERVAL '7 days'), -- Recommendations expire in 7 days
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Indexes for better performance
CREATE INDEX idx_ai_requests_user_id ON ai_requests(user_id);
CREATE INDEX idx_ai_requests_type_status ON ai_requests(request_type, status);
CREATE INDEX idx_ai_requests_created_at ON ai_requests(created_at);

CREATE INDEX idx_ai_content_hash ON ai_generated_content(content_hash);
CREATE INDEX idx_ai_content_type_reference ON ai_generated_content(content_type, source_reference_type, source_reference_id);
CREATE INDEX idx_ai_content_expires ON ai_generated_content(expires_at);

CREATE INDEX idx_quiz_sessions_user_id ON quiz_sessions(user_id);
CREATE INDEX idx_quiz_sessions_media_id ON quiz_sessions(media_id);
CREATE INDEX idx_quiz_sessions_created_at ON quiz_sessions(created_at);

CREATE INDEX idx_user_recommendations_user_id ON user_recommendations(user_id);
CREATE INDEX idx_user_recommendations_expires ON user_recommendations(expires_at);

-- Comments for documentation
COMMENT ON TABLE ai_requests IS 'Stores all AI service requests and responses for audit and caching';
COMMENT ON TABLE ai_generated_content IS 'Caches AI-generated content to avoid redundant API calls';
COMMENT ON TABLE quiz_sessions IS 'Stores quiz attempts and results for users';
COMMENT ON TABLE user_recommendations IS 'Stores personalized recommendations generated by AI';
