services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mediasphere-dev-db
    environment:
      - POSTGRES_DB=db_408
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_INITDB_ARGS=--auth-local=trust
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d db_408"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mediasphere-dev
    restart: unless-stopped

  backend:
    build:
      context: ./MediaSphere_backend
      dockerfile: Dockerfile.dev
    image: abdfaiyaz/mediasphere-backend:dev
    container_name: mediasphere-dev-backend
    volumes:
      - ./MediaSphere_backend:/app
      - /app/target
    command: ["mvn", "spring-boot:run"]
    
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=db_408
      - DB_USER=postgres
      - DB_PASSWORD=1234
      - SERVER_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - mediasphere-dev
    restart: unless-stopped

  frontend:
    build:
      context: ./MediaSphere_frontend
      dockerfile: Dockerfile
    image: abdfaiyaz/mediasphere-frontend:dev
    container_name: mediasphere-dev-frontend
    volumes:
      - ./MediaSphere_frontend:/app
      - /app/node_modules
    command: ["pnpm", "dev"]
    
    environment:
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bG9naWNhbC1sZW1taW5nLTI3LmNsZXJrLmFjY291bnRzLmRldiQ
      - CLERK_SECRET_KEY=sk_test_hFzWxK70KYY2p2nUo6xR30DcecKCIYYxpeMRxhD8ae
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8080
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mediasphere-dev
    restart: unless-stopped

networks:
  mediasphere-dev:
    driver: bridge

# Volumes for persistent data
volumes:
  postgres_dev_data:
    driver: local
