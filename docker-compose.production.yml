# MediaSphere Production Deployment
# Docker Compose file for Azure VM deployment

services:
  # PostgreSQL Database
  postgres:
    image: abdfaiyaz/mediasphere-db:latest
    container_name: mediasphere-postgres
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-1234}
      - POSTGRES_DB=${DB_NAME:-db_408}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - mediasphere-network
    restart: unless-stopped

  # Spring Boot Backend
  backend:
    image: abdfaiyaz/mediasphere-backend:latest
    container_name: mediasphere-backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-db_408}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-1234}
      - SERVER_PORT=8080
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC
      # AI/Gemini Configuration
      - GEMINI_API_KEY=${GEMINI_API_KEY:-AIzaSyDPGxRCEHsD8ubAhSla-9SwBt_5myqElFs}
      - GEMINI_API_URL=${GEMINI_API_URL:-https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent}
      # AI Service Configuration  
      - AI_SERVICE_MAX_TOKENS=${AI_SERVICE_MAX_TOKENS:-1000}
      - AI_SERVICE_TEMPERATURE=${AI_SERVICE_TEMPERATURE:-0.7}
      - AI_SERVICE_TIMEOUT_SECONDS=${AI_SERVICE_TIMEOUT_SECONDS:-30}
      - AI_SERVICE_RETRY_ATTEMPTS=${AI_SERVICE_RETRY_ATTEMPTS:-3}
      # File Upload Configuration
      - APP_UPLOAD_MAX_SIZE=${APP_UPLOAD_MAX_SIZE:-10485760}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - mediasphere-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./MediaSphere_frontend
      dockerfile: Dockerfile
      target: production
    image: abdfaiyaz/mediasphere-frontend:latest
    container_name: mediasphere-frontend
    environment:
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY:-pk_test_bG9naWNhbC1sZW1taW5nLTI3LmNsZXJrLmFjY291bnRzLmRldiQ}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY:-sk_test_hFzWxK70KYY2p2nUo6xR30DcecKCIYYxpeMRxhD8ae}
      - NEXT_PUBLIC_API_BASE_URL=http://20.255.51.86:8080
      - NEXT_PUBLIC_APP_URL=http://20.255.51.86:3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - mediasphere-network
    restart: unless-stopped

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local

# Networks
networks:
  mediasphere-network:
    driver: bridge